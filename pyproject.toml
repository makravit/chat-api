[build-system]
build-backend = "poetry.core.masonry.api"

requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "chat-api"
version = "0.1.0"
description = "A FastAPI REST API for chat services."
authors = [
  "Martin Krahl Vitale <m.krahl.vitale@gmail.com>",
]

[[tool.poetry.packages]]
include = "app"

[tool.poetry.dependencies]
python = ">=3.13"
fastapi = ">=0.110.0,<1.0.0"
uvicorn = { extras = [
  "standard",
], version = ">=0.29.0,<1.0.0" }
python-jose = ">=3.3.0,<4.0.0"
passlib = { extras = [
  "bcrypt",
], version = ">=1.7.4,<2.0.0" }
pydantic = { extras = [
  "email",
], version = ">=2.7.1,<3.0.0" }
pydantic-settings = ">=2.2.1,<3.0.0"
sqlalchemy = ">=2.0.30,<3.0.0"
psycopg2-binary = ">=2.9.9,<3.0.0"
starlette = ">=0.36.3,<1.0.0"
typing-extensions = ">=4.11.0,<5.0.0"
structlog = ">=24.1.0,<25.0.0"
alembic = ">=1.13.1,<2.0.0"
prometheus-client = ">=0.22.1,<1.0.0"

[tool.poetry.group.dev.dependencies]
cython = ">=3.0.10,<4.0.0"
httpx = ">=0.27.0,<1.0.0"
pre-commit = ">=3.7.0,<4.0.0"
pytest = ">=8.2.2,<9.0.0"
pytest-asyncio = ">=0.23.6,<1.0.0"
pytest-cov = ">=5.0.0,<6.0.0"
ruff = ">=0.4.4,<1.0.0"
setuptools = ">=69.2.0,<70.0.0"
testcontainers = { extras = [
  "postgresql",
], version = ">=4.4.0,<5.0.0", python = ">=3.13,<4.0" }
wheel = ">=0.43.0,<1.0.0"

[tool.ruff]
target-version = "py313"

line-length = 88
format.indent-style = "space"
format.quote-style = "double"
lint.select = [
  "ARG", # flake8-unused-arguments
  "E",   # pycodestyle errors
  "ERA", # eradicate (commented-out code)
  "F",   # pyflakes
  "I",   # isort (import sorting)
]
lint.extend-select = [
  "A",      # flake8-builtins
  "ANN",    # flake8-annotations (type annotation coverage)
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "BLE",    # blind-except
  "C4",     # flake8-comprehensions
  "C90",    # mccabe complexity
  "COM",    # flake8-commas (trailing commas/style)
  "D",      # pydocstyle (docstring conventions)
  "DTZ",    # flake8-datetimez
  "EM",     # flake8-errmsg (clear exception messages)
  "FBT",    # flake8-boolean-trap (avoid positional bool args)
  "G",      # logging-format
  "ISC",    # implicit-str-concat
  "N",      # pep8-naming
  "PERF",   # perflint
  "PGH",    # pygrep-hooks (e.g., precise noqa)
  "PIE",    # flake8-pie (pythonic improvements)
  "PLE",    # pylint errors
  "PLW",    # pylint warnings
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-use-pathlib
  "RET",    # flake8-return (clean return flows)
  "RSE",    # flake8-raise (exception raising best practices)
  "RUF001", # ambiguous unicode char (confusable)
  "RUF002", # ambiguous unicode string (confusable)
  "RUF003", # ambiguous unicode comment (confusable)
  "RUF005", # collection-literal-concatenation
  "RUF006", # mutable default arg in dataclass
  "RUF007", # implicit Optional
  "RUF008", # mutable class attributes
  "RUF009", # function call in default arg
  "RUF010", # try-except-in-loop
  "RUF011", # useless "await" or similar
  "RUF012", # mutable default in dataclass field
  "RUF100", # remove unused noqa
  "S",      # bandit security checks
  "SIM",    # flake8-simplify
  "T10",    # flake8-debugger (no debugger calls)
  "T20",    # flake8-print
  "TCH",    # flake8-type-checking (optimize import locations)
  "TD",     # flake8-todos (track TODO/FIXME)
  "TID",    # flake8-tidy-imports (prefer absolute imports, tidy import style)
  "TRY",    # tryceratops (exception anti-patterns)
  "UP",     # pyupgrade
  "W",      # pycodestyle warnings
  "YTT",    # flake8-2020 (version checks pitfalls)
]
# Avoid conflicts between ruff-format and certain lint rules
lint.extend-ignore = [
  "COM812", # Trailing comma formatting; let formatter decide
  "ISC001", # Implicit string concatenation formatting; let formatter decide
]
lint.per-file-ignores."alembic/**" = [
  "D", # migration scripts are generated/ops-focused; skip docstring enforcement
]

# Allow local development defaults and benign constants without triggering Bandit S105.
# Real secrets must come from environment variables in production.
lint.per-file-ignores."app/core/config.py" = [
  "S105", # default values for dev/local; not real secrets
]

# TokenResponse.token_type default is a benign constant ("bearer"), not a secret.
lint.per-file-ignores."app/schemas/user.py" = [
  "S105",
]

# Bandit: allow asserts in tests
lint.per-file-ignores."tests/**" = [
  "D",    # ignore docstrings in tests
  "FBT",  # allow boolean positional args in test helpers/fixtures
  "S101", # asserts in tests
]
lint.flake8-tidy-imports.ban-relative-imports = "all"
lint.isort.combine-as-imports = true
lint.isort.known-first-party = [
  "app",
]
lint.isort.split-on-trailing-comma = true
lint.mccabe.max-complexity = 10
lint.pydocstyle.convention = "google"
lint.pyupgrade.keep-runtime-typing = true
